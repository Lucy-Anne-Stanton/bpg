'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.loginPost = loginPost;
exports.loginSuccess = loginSuccess;
exports.loginError = loginError;
/**
 * @module authActionCreators
 */

/**
 * Create a 'POST' action with onSuccess that parses the API response and
 * returns either a loginError action (API successfully returned, but the
 * response indicates login failure) or a loginSuccess action. onError always
 * returns a loginError action
 * @param {Object} params object with 'email' and 'password' props
 */
function loginPost(params) {
	var LOGIN_REF = 'login';
	return {
		type: 'LOGIN_POST',
		payload: {
			query: {
				type: 'login',
				endpoint: 'sessions',
				params: params,
				ref: LOGIN_REF
			},
			onSuccess: function onSuccess(_ref) {
				var queries = _ref.queries,
				    responses = _ref.responses;

				// get the response `value`
				var response = responses.slice()[0][LOGIN_REF];
				// check for errors reported by API (will be handled by loginError)

				if (response.value.errors) {
					return loginError(response.value.errors);
				}
				// otherwise return the action
				return loginSuccess();
			},
			onError: loginError
		}
	};
}

function loginSuccess(response) {
	return {
		type: 'LOGIN_SUCCESS',
		payload: response
	};
}

function loginError(response) {
	return {
		type: 'LOGIN_ERROR',
		payload: response
	};
}