'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.epicIgnoreAction = exports.getServer = exports.parseCookieHeader = exports.middlewareDispatcher = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _hapi = require('hapi');

var _hapi2 = _interopRequireDefault(_hapi);

var _toughCookie = require('tough-cookie');

var _toughCookie2 = _interopRequireDefault(_toughCookie);

var _rxjs = require('rxjs');

var _reduxObservable = require('redux-observable');

var _testUtils = require('meetup-web-mocks/lib/testUtils');

var _app = require('meetup-web-mocks/lib/app');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var middlewareDispatcher = exports.middlewareDispatcher = function middlewareDispatcher(middleware) {
	return function (storeData, action) {
		var dispatched = null;
		var dispatch = middleware((0, _testUtils.createFakeStore)(storeData))(function (actionAttempt) {
			return dispatched = actionAttempt;
		});
		dispatch(action);
		return dispatched;
	};
};

var parseCookieHeader = exports.parseCookieHeader = function parseCookieHeader(cookieHeader) {
	var cookies = cookieHeader instanceof Array ? cookieHeader.map(_toughCookie2.default.parse) : [_toughCookie2.default.parse(cookieHeader)];

	return cookies.reduce(function (acc, cookie) {
		return _extends({}, acc, _defineProperty({}, cookie.key, cookie.value));
	}, {});
};

var getServer = exports.getServer = function getServer(connection) {
	var server = new _hapi2.default.Server();
	server.connection(connection);

	// mock the anonAuthPlugin
	server.decorate('request', 'authorize', function (request) {
		return function () {
			return _rxjs.Observable.of(request);
		};
	}, { apply: true });
	server.decorate('reply', 'track', function () {
		return {};
	});
	return server;
};

var epicIgnoreAction = exports.epicIgnoreAction = function epicIgnoreAction(epic) {
	var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _app.MOCK_MEANINGLESS_ACTION;
	var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, _testUtils.createFakeStore)(_app.MOCK_APP_STATE);
	return function () {
		var spyable = {
			notCalled: function notCalled() {}
		};
		spyOn(spyable, 'notCalled');
		var action$ = _reduxObservable.ActionsObservable.of(action);
		return epic(action$, store).do(spyable.notCalled, null, expect(spyable.notCalled).not.toHaveBeenCalled()).toPromise();
	};
};