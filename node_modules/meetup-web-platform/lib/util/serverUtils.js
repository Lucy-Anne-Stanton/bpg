'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.checkForDevUrl = checkForDevUrl;
exports.configureEnv = configureEnv;
exports.server = server;

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _hapi = require('hapi');

var _hapi2 = _interopRequireDefault(_hapi);

var _tracking = require('./tracking');

var _tracking2 = _interopRequireDefault(_tracking);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * determine whether a nested object of values contains a string that contains
 * `.dev.meetup.`
 * @param {String|Object} value string or nested object with
 * values that could be URL strings
 * @return {Boolean} whether the `value` contains a 'dev' URL string
 */
function checkForDevUrl(value) {
	switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
		case 'string':
			return value.indexOf('.dev.meetup.') > -1;
		case 'object':
			return Object.keys(value).some(function (key) {
				return checkForDevUrl(value[key]);
			});
	}
	return false;
}

/**
 * Make any environment changes that need to be made in response to the provided
 * config
 * @param {Object} config
 * @return {Object} the original config object
 */
function configureEnv(config) {
	// When using .dev.meetup endpoints, ignore self-signed SSL cert
	var USING_DEV_ENDPOINTS = checkForDevUrl(config);
	_https2.default.globalAgent.options.rejectUnauthorized = !USING_DEV_ENDPOINTS;

	return config;
}

/**
 * server-starting function
 */
function server(routes, connection, plugins, platform_agent, config) {
	var server = new _hapi2.default.Server();

	// store runtime state
	// https://hapijs.com/api#serverapp
	server.app = {
		isDevConfig: checkForDevUrl(config) };
	server.decorate('reply', 'track', (0, _tracking2.default)(platform_agent));

	return server.connection(connection).register(plugins).then(function () {
		return server.auth.strategy('default', 'oauth', true, config);
	}).then(function () {
		return server.log(['start'], plugins.length + ' plugins registered, assigning routes...');
	}).then(function () {
		return server.route(routes);
	}).then(function () {
		return server.log(['start'], routes.length + ' routes assigned, starting server...');
	}).then(function () {
		return server.start();
	}).then(function () {
		return server.log(['start'], 'Dev server is listening at ' + server.info.uri);
	}).then(function () {
		return server;
	});
}