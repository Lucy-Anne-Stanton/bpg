'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.activeRouteQueries$ = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
tilities for interacting with the Router and getting location data
module routeUtils



var _rxjs = require('rxjs');

var _rxjs2 = _interopRequireDefault(_rxjs);

var _match = require('react-router/lib/match');

var _match2 = _interopRequireDefault(_match);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Create observable from callback-based `match`
var match$ = _rxjs2.default.Observable.bindNodeCallback(_match2.default);

/**
 * From the renderProps provided by React Router's `match`, collect the results
 * of the query properties associated with currently-active routes
 *
 * @param matchCallbackArgs {Array} redirectLocation(ignored) and renderProps
 * @return {Array} The return values of each active route's query function
 */
function getActiveRouteQueries(_ref) {
	var _ref2 = _slicedToArray(_ref, 2),
	    _ref2$ = _ref2[1],
	    routes = _ref2$.routes,
	    location = _ref2$.location,
	    params = _ref2$.params;

	var queries = routes.filter(function (_ref3) {
		var query = _ref3.query;
		return query;
	}) // only get routes with queries
	.reduce(function (queries, _ref4) {
		var query = _ref4.query;
		// assemble into one array of queries
		var routeQueries = query instanceof Array ? query : [query];
		return queries.concat(routeQueries);
	}, []).map(function (queryFn) {
		return queryFn({ location: location, params: params });
	}) // call the query function
	.filter(function (query) {
		return query;
	}); // empty return values should not be sent

	return queries;
}

var activeRouteQueries$ = exports.activeRouteQueries$ = function activeRouteQueries$(routes) {
	return function (location) {
		return match$({ routes: routes, location: location }).map(getActiveRouteQueries).filter(function (queries) {
			return queries.length;
		});
	};
};