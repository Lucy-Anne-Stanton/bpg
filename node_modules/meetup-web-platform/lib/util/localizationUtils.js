'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.polyfillNodeIntl = polyfillNodeIntl;
exports.loadLocale = loadLocale;
exports.getLocaleCode = getLocaleCode;

var _fr = require('react-intl/locale-data/fr');

var _fr2 = _interopRequireDefault(_fr);

var _de = require('react-intl/locale-data/de');

var _de2 = _interopRequireDefault(_de);

var _ja = require('react-intl/locale-data/ja');

var _ja2 = _interopRequireDefault(_ja);

var _es = require('react-intl/locale-data/es');

var _es2 = _interopRequireDefault(_es);

var _it = require('react-intl/locale-data/it');

var _it2 = _interopRequireDefault(_it);

var _pt = require('react-intl/locale-data/pt');

var _pt2 = _interopRequireDefault(_pt);

var _reactIntl = require('react-intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var localeMap = {
	'en-US': {
		// Use built-in locale-data for en
	},
	'en-AU': {
		// Use built-in locale-data for en
	},
	'de-DE': {
		data: _de2.default
	},
	'fr-FR': {
		data: _fr2.default
	},
	'ja-JP': {
		data: _ja2.default
	},
	'it-IT': {
		data: _it2.default
	},
	'pt-BR': {
		data: _pt2.default
	},
	'es-ES': {
		data: _es2.default
	},
	es: {
		data: _es2.default
	}
};

/**
 * Polyfill Node Intl APIs
 * `Intl` exists, but it doesn't have the locale data we need
 *
 * @method polyfillNodeIntl
 */
/**
 * A module for i18n utilities
 * @module localizationUtils
 */

function polyfillNodeIntl() {
	var IntlPolyfill = require('intl');
	Intl.NumberFormat = IntlPolyfill.NumberFormat;
	Intl.DateTimeFormat = IntlPolyfill.DateTimeFormat;
}

/**
 * Load data for given localeCode into ReactIntl
 *
 * @method loadLocale
 * @param localeCode {String}
 */
function loadLocale(localeCode) {
	var locale = localeMap[localeCode] || {};
	(0, _reactIntl.addLocaleData)(locale.data);
}

/**
 * Get locale code and for given member
 *
 * Note:
 * The api currently returns locale codes with underscores
 * instead of dashes, so this method supports both until fixed.
 *
 * @method getLocaleCode
 * @param self {Object} Object representing member from state
 * @returns {String} Locale code for member, i.e., 'fr-FR'
 */
function getLocaleCode(self) {
	// Retreive locale code from state (api response)
	return (self && self.lang || 'en-US').replace('_', '-');
}