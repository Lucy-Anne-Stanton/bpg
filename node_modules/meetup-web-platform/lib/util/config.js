'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = getConfig;

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Start the server with a config
 *
 * This module provides a Promise-based interface for assembling a
 * configuration object and passing it to the server startup function.
 * @module config
 */

function getConfig(overrideConfig) {
	/**
  * Read all config from environment variables here once on startup
  */
	if (!process.env.OAUTH_ACCESS_URL && process.env.ANONYMOUS_ACCESS_URL) {
		console.warn('The ANONYMOUS_ACCESS_URL env variable is deprecated - please rename to OAUTH_ACCESS_URL');
	}
	if (!process.env.OAUTH_AUTH_URL && process.env.ANONYMOUS_AUTH_URL) {
		console.warn('The ANONYMOUS_AUTH_URL env variable is deprecated - please rename to OAUTH_AUTH_URL');
	}
	var config = {
		API_PROTOCOL: process.env.API_PROTOCOL || 'https',
		API_HOST: process.env.API_HOST || 'api.dev.meetup.com',
		COOKIE_ENCRYPT_SECRET: process.env.COOKIE_ENCRYPT_SECRET,
		CSRF_SECRET: process.env.CSRF_SECRET,
		DEV_SERVER_PORT: process.env.DEV_SERVER_PORT || 8000,
		OAUTH_AUTH_URL: process.env.OAUTH_AUTH_URL || process.env.ANONYMOUS_AUTH_URL || 'https://secure.dev.meetup.com/oauth2/authorize',
		OAUTH_ACCESS_URL: process.env.OAUTH_ACCESS_URL || process.env.ANONYMOUS_ACCESS_URL || 'https://secure.dev.meetup.com/oauth2/access',
		PHOTO_SCALER_SALT: process.env.PHOTO_SCALER_SALT,
		oauth: {
			secret: process.env.MUPWEB_OAUTH_SECRET,
			key: process.env.MUPWEB_OAUTH_KEY
		}
	};
	config.API_SERVER_ROOT_URL = config.API_PROTOCOL + '://' + config.API_HOST;

	// currently all config is available syncronously, so resolve immediately
	return Promise.resolve(_extends({}, config, overrideConfig)).then(validateConfig);
}

function validateConfig(config) {
	var oauthError = new Error('get oauth secrets from web platform team');
	var configSchema = _joi2.default.object().keys({
		API_PROTOCOL: _joi2.default.any().only(['https', 'http']).required(),
		API_HOST: _joi2.default.string().hostname().required(),
		API_SERVER_ROOT_URL: _joi2.default.string().uri(),
		COOKIE_ENCRYPT_SECRET: _joi2.default.string().min(32).required().error(new Error('set COOKIE_ENCRYPT_SECRET env variable to a random 32+ character string')),
		CSRF_SECRET: _joi2.default.string().min(32).required().error(new Error('set CSRF_SECRET env variable to a random 32+ character string')),
		DEV_SERVER_PORT: _joi2.default.number().integer().max(65535),
		OAUTH_AUTH_URL: _joi2.default.string().uri().required(),
		OAUTH_ACCESS_URL: _joi2.default.string().uri().required(),
		PHOTO_SCALER_SALT: _joi2.default.string().min(1).required().error(new Error('get PHOTO_SCALER_SALT from web platform team')),
		oauth: _joi2.default.object().keys({
			secret: _joi2.default.string().min(1).required().error(oauthError),
			key: _joi2.default.string().min(1).required().error(oauthError)
		}).required()
	}).required();

	var result = _joi2.default.validate(config, configSchema);
	if (result.error) {
		throw result.error;
	}
	return result.value;
}