'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.makeCache = makeCache;
/**
 * This function performs feature sniffing to determine whether the preferred
 * IndexedDB cache is available, otherwise it falls back to a simple
 * plain-object-based cache that will only survive as long as the request.
 *
 * The cache object methods are thin wrappers around their IndexedDB
 * ObjectStore equivalents
 *
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore}
 *
 * @returns {Object} an object with Promise-based `get`, `set`, `delete`, and
 * `clear` methods
 */
function makeCache() {
	if (typeof window === 'undefined' || !window.indexedDB) {
		var _ret = function () {
			console.log('no IndexedDB caching available - fallback to plain object');
			var _data = {};
			return {
				v: {
					get: function get(key) {
						return Promise.resolve(_data[key]);
					},
					set: function set(key, val) {
						_data[key] = val;
						return Promise.resolve(true);
					},
					delete: function _delete(key) {
						delete _data[key];
						return Promise.resolve(true);
					},
					clear: function clear() {
						Object.keys(_data).forEach(function (key) {
							return delete _data[key];
						});
						return Promise.resolve(true);
					}
				}
			};
		}();

		if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	}

	return require('idb-keyval');
}

/**
 * Generates a function that can read queries and return hits in the supplied cache
 *
 * @param {Object} cache the persistent cache containing query-able data
 * @param {Object} query query for app data
 * @return {Promise} resolves with cache hit, otherwise rejects
 */
var cacheReader = exports.cacheReader = function cacheReader(cache) {
	return function (query) {
		return cache.get(JSON.stringify(query)).then(function (response) {
			return [query, response];
		}).catch(function (err) {
			return [query, null];
		});
	};
}; // errors don't matter - just return null

/**
 * Generates a function that can write query-response values into cache
 *
 * @param {Object} cache the persistent cache containing query-able data
 * @param {Object} query query for app data
 * @param {Object} response plain object API response for the query
 * @return {Promise}
 */
var cacheWriter = exports.cacheWriter = function cacheWriter(cache) {
	return function (query, response) {
		return cache.set(JSON.stringify(query), response);
	};
};