'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('rxjs');

var _reduxObservable = require('redux-observable');

var _sync = require('../epics/sync');

var _sync2 = _interopRequireDefault(_sync);

var _cache = require('../epics/cache');

var _cache2 = _interopRequireDefault(_cache);

var _post = require('../epics/post');

var _post2 = _interopRequireDefault(_post);

var _delete = require('../epics/delete');

var _delete2 = _interopRequireDefault(_delete);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The middleware is exported as a getter because it needs the application's
 * routes in order to set up the nav-related epic(s) that are part of the
 * final middleware
 *
 * **Note** it's unlikely that the server needs any epics other than `sync` in
 * order to render the application. We may want to write a server-specific
 * middleware that doesn't include the other epics if performance is an issue
 */
var getPlatformMiddleware = function getPlatformMiddleware(routes, fetchQueries) {
  return (0, _reduxObservable.createEpicMiddleware)((0, _reduxObservable.combineEpics)((0, _sync2.default)(routes, fetchQueries), (0, _cache2.default)(), (0, _post2.default)(fetchQueries), (0, _delete2.default)(fetchQueries)));
}; // required to enable all Observable operators
exports.default = getPlatformMiddleware;