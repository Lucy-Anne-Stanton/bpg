'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _duotone = require('../util/duotone');

var _apiProxyHandler = require('./apiProxyHandler');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var validApiPayloadSchema = _joi2.default.object({
	queries: _joi2.default.string().required(),
	metadata: _joi2.default.string(),
	logout: _joi2.default.any()
});

var getApiProxyRoutes = function getApiProxyRoutes(path, env, apiProxyFn$) {
	var proxyApiRequest$ = apiProxyFn$({
		API_TIMEOUT: env.API_TIMEOUT,
		baseUrl: env.API_SERVER_ROOT_URL,
		duotoneUrls: (0, _duotone.getDuotoneUrls)(_duotone.duotones, env.PHOTO_SCALER_SALT)
	});

	/**
  * This handler converts the application-supplied queries into external API
  * calls, and converts the API call responses into a standard format that
  * the application expects.
  *
  * @returns Array query responses, which are in the format defined
  *   by `apiAdapter.apiResponseToQueryResponse`
  */
	var routeBase = {
		path: path,
		handler: (0, _apiProxyHandler.getApiProxyRouteHandler)(proxyApiRequest$),
		config: {
			plugins: {
				'electrode-csrf-jwt': {
					enabled: true
				}
			},
			ext: {
				onPreResponse: {
					method: function method(request, reply) {
						var response = request.response;
						if (response.isBoom) {
							request.log(['error'], request.url.href + ' responded with:\n ' + response.stack);
						}
						reply.continue();
					}
				}
			}
		}
	};
	var apiGetRoute = _extends({}, routeBase, {
		method: ['GET', 'DELETE', 'PATCH'],
		config: _extends({}, routeBase.config, {
			validate: {
				query: validApiPayloadSchema
			}
		})
	});
	var apiPostRoute = _extends({}, routeBase, {
		method: 'POST',
		config: _extends({}, routeBase.config, {
			validate: {
				payload: validApiPayloadSchema
			}
		})
	});

	return [apiGetRoute, apiPostRoute];
};

exports.default = getApiProxyRoutes;