'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = start;

require('./util/globals');

var _config = require('./util/config');

var _config2 = _interopRequireDefault(_config);

var _plugins = require('./plugins');

var _plugins2 = _interopRequireDefault(_plugins);

var _routes = require('./routes');

var _routes2 = _interopRequireDefault(_routes);

var _serverUtils = require('./util/serverUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * @module server
 */

/**
 * The start function applies the rendering function to the correct application
 * route and combines the provided routes and plugins with the base routes
 * and plugins
 *
 * @param {Object} renderRequestMap A mapping of localeCodes to functions that emit
 *   the rendered HTML for the locale-specific request
 * @param {Array} routes additional routes for the app - cannot include a
 *   wildcard route
 * @param {Array} plugins additional plugins for the server, usually to support
 *   features in the additional routes
 * @return {Promise} the Promise returned by Hapi's `server.connection` method
 */
function start(renderRequestMap, _ref) {
	var _ref$routes = _ref.routes,
	    routes = _ref$routes === undefined ? [] : _ref$routes,
	    _ref$plugins = _ref.plugins,
	    plugins = _ref$plugins === undefined ? [] : _ref$plugins,
	    _ref$platform_agent = _ref.platform_agent,
	    platform_agent = _ref$platform_agent === undefined ? 'consumer_name' : _ref$platform_agent;
	var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _config2.default;

	// source maps make for better stack traces - we might not want this in
	// production if it makes anything slower, though
	// (process.env.NODE_ENV === 'production')
	require('source-map-support').install();

	return config().then(_serverUtils.configureEnv).then(function (config) {
		var baseRoutes = (0, _routes2.default)(renderRequestMap, config);
		var finalRoutes = [].concat(_toConsumableArray(routes), _toConsumableArray(baseRoutes));

		var connection = {
			host: '0.0.0.0',
			port: config.DEV_SERVER_PORT,
			routes: {
				plugins: {
					'electrode-csrf-jwt': {
						enabled: false
					}
				}
			}
		};

		var finalPlugins = [].concat(_toConsumableArray(plugins), _toConsumableArray((0, _plugins2.default)(config)));

		return (0, _serverUtils.server)(finalRoutes, connection, finalPlugins, platform_agent, config);
	});
}