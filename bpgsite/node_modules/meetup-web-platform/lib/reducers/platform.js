'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.DEFAULT_CLICK_TRACK = exports.DEFAULT_APP_STATE = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * The root level reducer for the app.
                                                                                                                                                                                                                                                                   * @module reducer
                                                                                                                                                                                                                                                                   **/

exports.app = app;
exports.clickTracking = clickTracking;
exports.config = config;
exports.preRenderChecklist = preRenderChecklist;
exports.default = makeRootReducer;

var _redux = require('redux');

var _reactRouterRedux = require('react-router-redux');

var _clickActionCreators = require('../actions/clickActionCreators');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var DEFAULT_APP_STATE = exports.DEFAULT_APP_STATE = {};

/**
 * The primary reducer for data provided by the API
 * `state.app` sub-tree
 *
 * @param {Object} state
 * @param {ReduxAction} action
 * @return {Object}
 */
function app() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_APP_STATE;
	var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	var newState = void 0;

	switch (action.type) {
		case 'API_REQUEST':
			if (action.meta.logout) {
				return DEFAULT_APP_STATE; // clear app state during logout
			}
			return state;
		case 'CACHE_SUCCESS': // fall through - same effect as API success
		case 'API_SUCCESS':
			// API_SUCCESS contains an array of responses, but we just need to build a single
			// object to update state with
			newState = action.payload.responses.reduce(function (s, r) {
				return _extends({}, s, r);
			}, {});
			delete state.error;
			return _extends({}, state, newState);
		case 'API_ERROR':
			return _extends({}, state, {
				error: action.payload
			});
		default:
			return state;
	}
}

var DEFAULT_CLICK_TRACK = exports.DEFAULT_CLICK_TRACK = { clicks: [] };
/**
 * @param {Object} data extensible object to store click data {
 *   clicks: array
 * }
 * @param {Object} action the dispatched action
 * @return {Object} new state
 */
function clickTracking() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_CLICK_TRACK;
	var action = arguments[1];

	if (action.type === _clickActionCreators.CLICK_TRACK_ACTION) {
		var clicks = [].concat(_toConsumableArray(state.clicks), [action.payload]);
		return _extends({}, state, {
			clicks: clicks
		});
	}
	if (action.type === _clickActionCreators.CLICK_TRACK_CLEAR_ACTION) {
		return DEFAULT_CLICK_TRACK;
	}
	return state;
}

function config() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var action = arguments[1];

	var csrf = void 0,
	    apiUrl = void 0,
	    trackId = void 0;

	if ((action.meta || {}).csrf) {
		// any CSRF-bearing action should update state
		csrf = action.meta.csrf;
		// create a copy of state with updated csrf
		state = _extends({}, state, { csrf: csrf });
	}
	switch (action.type) {
		case 'CONFIGURE_API_URL':
			apiUrl = action.payload;
			return _extends({}, state, { apiUrl: apiUrl });
		case 'CONFIGURE_TRACKING_ID':
			trackId = action.payload;
			return _extends({}, state, { trackId: trackId });
		default:
			return state;
	}
}

/**
 * This reducer manages a list of boolean flags that indicate the 'ready to
 * render' state of the application. It is used exclusively by the server,
 * which triggers actions when initializing a response that should eventually
 * make all flags 'true'
 *
 * The server can then read these flags from state and render when ready
 */
function preRenderChecklist() {
	var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [false],
	    _ref2 = _slicedToArray(_ref, 1),
	    apiDataLoaded = _ref2[0];

	var action = arguments[1];

	return [apiDataLoaded || Boolean(['API_COMPLETE', 'API_ERROR'].find(function (type) {
		return type === action.type;
	}))];
}

var routing = _reactRouterRedux.routerReducer;

var platformReducers = {
	app: app,
	clickTracking: clickTracking,
	config: config,
	preRenderChecklist: preRenderChecklist,
	routing: routing
};

/**
 * A function that builds a reducer combining platform-standard reducers and
 * app-specific reducers
 */
function makeRootReducer() {
	var appReducers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	Object.keys(appReducers).forEach(function (reducer) {
		if (reducer in platformReducers) {
			throw new Error('\'' + reducer + '\' is a reserved platform reducer name');
		}
	});
	return (0, _redux.combineReducers)(_extends({}, platformReducers, appReducers));
}