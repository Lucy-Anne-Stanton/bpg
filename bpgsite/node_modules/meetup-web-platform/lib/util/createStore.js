'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.serverFetchQueries = exports.clickTrackEnhancer = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getPlatformMiddlewareEnhancer = getPlatformMiddlewareEnhancer;
exports.mergeRawCookies = mergeRawCookies;
exports.getServerCreateStore = getServerCreateStore;
exports.getBrowserCreateStore = getBrowserCreateStore;

var _redux = require('redux');

var _epic = require('../middleware/epic');

var _epic2 = _interopRequireDefault(_epic);

var _fetchUtils = require('../util/fetchUtils');

var _clickTracking = require('./clickTracking');

var _clickTracking2 = _interopRequireDefault(_clickTracking);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * A createStore function with middleware and other store enhancers applied
                                                                                                                                                                                                     * @module createStore
                                                                                                                                                                                                     */


var noopMiddleware = function noopMiddleware(store) {
	return function (next) {
		return function (action) {
			return next(action);
		};
	};
};

var clickTrackEnhancer = exports.clickTrackEnhancer = function clickTrackEnhancer(createStore) {
	return function (reducer, initialState, enhancer) {
		var store = createStore(reducer, initialState, enhancer);
		var clickTracker = (0, _clickTracking2.default)(store);
		document.body.addEventListener('click', clickTracker);
		document.body.addEventListener('change', clickTracker);

		return store;
	};
};

/**
 * The platform has a specific set of middleware that must be applied to the
 * store in order for it to work. This store enhancer consumes a few app-
 * specific configuration options to set up the middleware enhancer correctly
 *
 * @param {Object} routes the React Router routes object
 * @param {Array} middleware additional middleware to inject into store
 * @param {Function} fetchQueriesFn a function that accepts queries and returns a Promise
 *   that resolves with API results
 * @return {Function} A Redux store enhancer function
 */
function getPlatformMiddlewareEnhancer(routes, middleware, fetchQueriesFn) {
	// **All** middleware gets added here
	var middlewareToApply = [(0, _epic2.default)(routes, fetchQueriesFn), typeof window !== 'undefined' && window.mupDevTools ? window.mupDevTools() : noopMiddleware].concat(_toConsumableArray(middleware));
	return _redux.applyMiddleware.apply(undefined, _toConsumableArray(middlewareToApply));
}

function mergeRawCookies(request) {
	var injectedCookies = Object.keys(request.state).filter(function (name) {
		return name.startsWith('__internal_');
	}).reduce(function (cookies, name) {
		return _extends({}, cookies, _defineProperty({}, name, request.state[name]));
	}, {});

	return (0, _fetchUtils.mergeCookies)(request.raw.req.headers.cookie || '', injectedCookies);
}

/**
 * wrap the `fetchQueries` function with a function that injects cookies into
 * the request
 *
 * @param {Object} cookieState { name: value } object of cookies to inject
 * @return {Function} a fetchQueries function
 */
var serverFetchQueries = exports.serverFetchQueries = function serverFetchQueries(request) {
	return function (api, options) {
		options.headers = options.headers || {};
		var serverCookie = mergeRawCookies(request);
		options.headers.cookie = options.headers.cookie ? options.headers.cookie + '; ' + serverCookie : serverCookie;
		options.headers.referer = options.headers.referer || request.url.pathname;
		return (0, _fetchUtils.fetchQueries)(api, options);
	};
};

/**
 * the server needs a slightly different store than the browser because the
 * server does not know which cookies to pass along to the `fetch` function
 * inside the sync middleware.
 *
 * This getServerCreateStore function will therefore return a store creator that
 * is specifically tailored to making API requests that correspond to the
 * incoming request from the browser
 *
 * @param {Object} routes the React Router routes object
 * @param {Array} middleware additional middleware to inject into store
 * @param {Object} request the Hapi request for this store
 */
function getServerCreateStore(routes, middleware, request) {
	var middlewareEnhancer = getPlatformMiddlewareEnhancer(routes, middleware, serverFetchQueries(request));
	return middlewareEnhancer(_redux.createStore);
}

function getBrowserCreateStore(routes, middleware) {
	var middlewareEnhancer = getPlatformMiddlewareEnhancer(routes, middleware, _fetchUtils.fetchQueries);
	var enhancer = (0, _redux.compose)(middlewareEnhancer, clickTrackEnhancer, window.devToolsExtension ? window.devToolsExtension() : function (fn) {
		return fn;
	} // this must be last enhancer
	);
	return enhancer(_redux.createStore);
}