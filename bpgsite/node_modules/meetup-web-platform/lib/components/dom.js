'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactHelmet = require('react-helmet');

var _reactHelmet2 = _interopRequireDefault(_reactHelmet);

var _escapeHtml = require('escape-html');

var _escapeHtml2 = _interopRequireDefault(_escapeHtml);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getInnerHTML(__html) {
	return {
		__html: __html
	};
}

/**
 * Module that builds html, head, and body elements
 * And inserts app markup in the body
 *
 * Elements should only be added inside head via Helmet
 * @see {@link https://github.com/nfl/react-helmet}
 *
 * This component solves some "hard" problems related to wrapping a React
 * application in the full HTML markup needed to render it on the server.
 *
 * 1. Passing server-side app state to the client-side JS application - the
 * `window.INITIAL_STATE` setting, which has a few subtle gotchas if
 * implemented differently
 * 2. `<head>` management through `react-helmet` - there are lots of ways of
 * doing this wrong or implementing a fragile/inflexible solution
 * 3. Using an injected variable to write the client JS application bundle path
 * - there are lots of ways to introduce bugs into alternative implementations.
 *
 * @module DOM
 */
var DOM = function DOM(props) {
	var appMarkup = props.appMarkup,
	    assetPublicPath = props.assetPublicPath,
	    baseUrl = props.baseUrl,
	    clientFilename = props.clientFilename,
	    initialState = props.initialState;

	/**
  * `initialState` has untrusted user-generated content that needs to be
  * written into the DOM inside a <script> tag.
  *
  * It needs to be transformed into a plain object containing only escaped content
  */

	// stringify the whole object so that it can be escaped in one pass

	var initialStateJson = JSON.stringify(initialState);

	// escape the string
	var escapedState = (0, _escapeHtml2.default)(initialStateJson);

	// Extract the `<head>` information from any page-specific `<Helmet>` components
	var head = _reactHelmet2.default.rewind();

	var APP_RUNTIME = {
		baseUrl: baseUrl,
		assetPublicPath: assetPublicPath,
		escapedState: escapedState
	};

	return _react2.default.createElement(
		'html',
		null,
		_react2.default.createElement(
			'head',
			null,
			head.title.toComponent(),
			head.meta.toComponent(),
			head.link.toComponent()
		),
		_react2.default.createElement(
			'body',
			null,
			_react2.default.createElement('div', { id: 'outlet', dangerouslySetInnerHTML: getInnerHTML(appMarkup) }),
			_react2.default.createElement('script', { dangerouslySetInnerHTML: getInnerHTML('window.APP_RUNTIME=' + JSON.stringify(APP_RUNTIME) + ';') }),
			_react2.default.createElement('script', { src: '' + assetPublicPath + clientFilename })
		)
	);
};

DOM.propTypes = {
	appMarkup: _react2.default.PropTypes.string,
	assetPublicPath: _react2.default.PropTypes.string.isRequired,
	baseUrl: _react2.default.PropTypes.string,
	clientFilename: _react2.default.PropTypes.string.isRequired,
	initialState: _react2.default.PropTypes.object.isRequired
};

exports.default = DOM;